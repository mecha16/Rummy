import random

# Constants
SUITS = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

class Card:
    """Class representing a single card in the deck."""
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __repr__(self):
        return f"{self.rank} of {self.suit}"

class Deck:
    """Class representing a deck of cards."""
    def __init__(self):
        self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS]
        random.shuffle(self.cards)

    def draw(self):
        """Draw a card from the deck."""
        return self.cards.pop() if self.cards else None

    def is_empty(self):
        return len(self.cards) == 0

class Player:
    """Class representing a player in the game."""
    def __init__(self, name):
        self.name = name
        self.hand = []

    def draw_card(self, deck):
        """Draw a card from the deck."""
        card = deck.draw()
        if card:
            self.hand.append(card)

    def discard(self, card):
        """Discard a card from the player's hand."""
        self.hand.remove(card)
        return card

    def show_hand(self):
        return ', '.join(str(card) for card in self.hand)

    def sort_hand(self):
        """Sort the player's hand by rank and suit."""
        self.hand.sort(key=lambda card: (RANKS.index(card.rank), SUITS.index(card.suit)))

    def has_won(self):
        """Check if the player has won by forming valid sets and sequences."""
        # Simplified winning condition: Check if the hand has at least one sequence
        sets, sequences = self.find_melds()
        return len(sequences) >= 1  # Example condition to check if a player has won

    def find_melds(self):
        """Find sets and sequences in hand."""
        # Add logic to find valid sets and sequences
        sets = []
        sequences = []
        # For now, just return empty lists (you need to implement this!)
        return sets, sequences

class Game:
    """Class representing the Rummy game."""
    def __init__(self, player_names):
        self.deck = Deck()
        self.players = [Player(name) for name in player_names]
        self.discard_pile = []
        self.current_player_idx = 0

    def deal_cards(self):
        """Deal 13 cards to each player."""
        for _ in range(13):
            for player in self.players:
                player.draw_card(self.deck)

    def play_turn(self, player):
        """Play a turn for a player."""
        print(f"\n{player.name}'s turn:")
        print("Current hand:", player.show_hand())

        # Player draws a card
        drawn_card = self.deck.draw()
        if drawn_card:
            print(f"{player.name} draws {drawn_card}")
            player.hand.append(drawn_card)
        
        # Player discards a card
        discarded_card = random.choice(player.hand)  # For now, discard a random card
        self.discard_pile.append(player.discard(discarded_card))
        print(f"{player.name} discards {discarded_card}")

        # Check if player has won
        if player.has_won():
            print(f"{player.name} has won!")
            return True
        return False

    def next_player(self):
        """Switch to the next player."""
        self.current_player_idx = (self.current_player_idx + 1) % len(self.players)

    def start(self):
        """Start the Rummy game."""
        self.deal_cards()
        print("\nGame Started!")
        
        while True:
            current_player = self.players[self.current_player_idx]
            if self.play_turn(current_player):
                break
            self.next_player()

if __name__ == "__main__":
    player_names = ["Alice", "Bob"]
    game = Game(player_names)
    game.start()
